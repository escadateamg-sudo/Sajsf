#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Mass Sender Pro
–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç—ã—Å—è—á –≥–æ—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫
"""

import asyncio
import json
import logging
import os
import random
import re
import sys
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Any
import threading
from concurrent.futures import ThreadPoolExecutor

try:
    import msvcrt  # –¢–æ–ª—å–∫–æ –¥–ª—è Windows
except ImportError:
    msvcrt = None

try:
    from telethon import TelegramClient, errors
    from telethon.sessions import StringSession
    from telethon.tl.types import KeyboardButtonUrl
    from telethon.tl.custom import Button
    import colorama
    from colorama import Fore, Back, Style, init
    import aiofiles
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
    print("pip install telethon colorama aiofiles")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows
init(autoreset=True)


class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    
    def __init__(self):
        self.config_file = "config.json"
        self.default_config = {
            "paths": {
                "users_file": "users.txt",
                "messages_file": "messages.txt", 
                "apidata_file": "apidata.txt",
                "proxies_file": "proxies.txt",
                "sessions_dir": "sessions",
                "sent_users_file": "sent_users/sent_users.txt",
                "logs_file": "telegram_sender.log",
                "stats_file": "account_stats.json"
            },
            "limits": {
                "daily_limit": 25,
                "min_delay": 5,
                "max_delay": 15,
                "accounts_per_proxy": 1,
                "accounts_per_api": 30,
                "max_concurrent_accounts": 3000
            },
            "settings": {
                "emoji_probability": 0.3,
                "retry_attempts": 3,
                "flood_wait_threshold": 600,
                "button": {
                    "text": "–ü–µ—Ä–µ–π—Ç–∏",
                    "url": "https://example.com"
                }
            }
        }
        self.config = self.load_config()

    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                    merged_config = self._deep_merge(self.default_config.copy(), loaded_config)
                    return merged_config
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return self.default_config.copy()

    def _deep_merge(self, default: dict, loaded: dict) -> dict:
        """–ì–ª—É–±–æ–∫–æ —Å–ª–∏–≤–∞–µ—Ç –¥–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        for key, value in loaded.items():
            if key in default and isinstance(default[key], dict) and isinstance(value, dict):
                default[key] = self._deep_merge(default[key], value)
            else:
                default[key] = value
        return default

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def get(self, key_path: str, default=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'limits.daily_limit')"""
        keys = key_path.split('.')
        value = self.config
        for key in keys:
            if isinstance(value, dict) and key in value:
                value = value[key]
            else:
                return default
        return value

    def set(self, key_path: str, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ –∫–ª—é—á–∞"""
        keys = key_path.split('.')
        config = self.config
        for key in keys[:-1]:
            if key not in config:
                config[key] = {}
            config = config[key]
        config[keys[-1]] = value
        self.save_config()


class Logger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    
    def __init__(self, log_file: str):
        self.log_file = log_file
        self.logs = []
        self.max_logs = 1000
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        logging.basicConfig(
            filename=log_file,
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            encoding='utf-8'
        )
        self.logger = logging.getLogger(__name__)

    def log(self, message: str, level: str = "INFO", color: str = Fore.WHITE):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {level}: {message}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.logs.append({
            "timestamp": timestamp,
            "level": level,
            "message": message,
            "color": color
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
        if len(self.logs) > self.max_logs:
            self.logs = self.logs[-self.max_logs:]
        
        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        if level == "ERROR":
            self.logger.error(message)
        elif level == "WARNING":
            self.logger.warning(message)
        else:
            self.logger.info(message)

    def success(self, message: str):
        self.log(message, "SUCCESS", Fore.GREEN)

    def error(self, message: str):
        self.log(message, "ERROR", Fore.RED)

    def warning(self, message: str):
        self.log(message, "WARNING", Fore.YELLOW)

    def info(self, message: str):
        self.log(message, "INFO", Fore.CYAN)

    def button_info(self, text: str, url: str):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
        self.log(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: [{text}] -> {url}", "BUTTON", Fore.MAGENTA)


class DataLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, config: Config, logger: Logger):
        self.config = config
        self.logger = logger
        self.emojis = ["üòä", "üéâ", "üî•", "üí´", "‚≠ê", "üåü", "üíé", "üöÄ", "‚ú®", "üéØ"]

    def process_spintax(self, text: str) -> Tuple[str, Optional[Dict[str, str]]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏–Ω—Ç–∞–∫—Å –≤ —Ç–µ–∫—Å—Ç–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ {button:—Ç–µ–∫—Å—Ç|url}
        button_data = None
        button_pattern = r'\{button:([^|]+)\|([^}]+)\}'
        button_match = re.search(button_pattern, text)
        
        if button_match:
            button_text = button_match.group(1).strip()
            button_url = button_match.group(2).strip()
            button_data = {"text": button_text, "url": button_url}
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = re.sub(button_pattern, '', text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å–ø–∏–Ω—Ç–∞–∫—Å
        pattern = r'\{([^}]+)\}'
        
        def replace_spin(match):
            options = match.group(1).split('|')
            return random.choice(options).strip()
        
        processed_text = re.sub(pattern, replace_spin, text)
        return processed_text, button_data

    def add_random_emoji(self, text: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é"""
        if random.random() < self.config.get("settings.emoji_probability", 0.3):
            emoji = random.choice(self.emojis)
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ
            if random.choice([True, False]):
                return f"{emoji} {text}"
            else:
                return f"{text} {emoji}"
        return text

    def load_users(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users_file = self.config.get("paths.users_file")
        if not os.path.exists(users_file):
            self.logger.error(f"–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {users_file}")
            return []

        users = []
        try:
            with open(users_file, 'r', encoding='utf-8') as f:
                for line in f:
                    user = line.strip()
                    if user:
                        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if user.startswith('@'):
                            user = user[1:]
                        users.append(user)
            
            self.logger.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            return users
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def load_messages(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        messages_file = self.config.get("paths.messages_file")
        if not os.path.exists(messages_file):
            self.logger.error(f"–§–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {messages_file}")
            return []

        messages = []
        try:
            with open(messages_file, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä–∞–º (1., 2., 3., –∏ —Ç.–¥.)
                raw_messages = re.split(r'\n(?=\d+\.)', content)
                
                for msg in raw_messages:
                    msg = msg.strip()
                    if msg:
                        # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        msg = re.sub(r'^\d+\.', '', msg).strip()
                        if msg:
                            messages.append(msg)
            
            self.logger.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            return messages
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []

    def load_api_data(self) -> List[Tuple[int, str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏"""
        api_file = self.config.get("paths.apidata_file")
        if not os.path.exists(api_file):
            self.logger.error(f"–§–∞–π–ª API –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {api_file}")
            return []

        api_data = []
        try:
            with open(api_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if ':' in line:
                        api_id, api_hash = line.split(':', 1)
                        api_data.append((int(api_id), api_hash))
            
            self.logger.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ API –∫–ª—é—á–µ–π: {len(api_data)}")
            return api_data
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

    def load_proxies(self) -> List[Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–∫—Å–∏"""
        proxies_file = self.config.get("paths.proxies_file")
        if not os.path.exists(proxies_file):
            self.logger.warning(f"–§–∞–π–ª –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {proxies_file}")
            return []

        proxies = []
        try:
            with open(proxies_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if ':' in line:
                        parts = line.split(':')
                        if len(parts) >= 4:
                            proxy = {
                                'proxy_type': 'socks5',
                                'addr': parts[0],
                                'port': int(parts[1]),
                                'username': parts[2],
                                'password': parts[3]
                            }
                            proxies.append(proxy)
            
            self.logger.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(proxies)}")
            return proxies
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            return []

    def load_sessions(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π"""
        sessions_dir = self.config.get("paths.sessions_dir")
        if not os.path.exists(sessions_dir):
            os.makedirs(sessions_dir)
            self.logger.warning(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–π: {sessions_dir}")
            self.logger.info("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à–∏ .session —Ñ–∞–π–ª—ã –≤ —ç—Ç—É –ø–∞–ø–∫—É")
            return []

        sessions = []
        try:
            for file in os.listdir(sessions_dir):
                if file.endswith('.session'):
                    session_path = os.path.join(sessions_dir, file)  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    sessions.append(session_path)
            
            self.logger.success(f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
            return sessions
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {e}")
            return []

    def load_sent_users(self) -> set:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        sent_file = self.config.get("paths.sent_users_file")
        sent_users = set()
        
        if os.path.exists(sent_file):
            try:
                with open(sent_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        user = line.strip()
                        if user:
                            sent_users.add(user)
                self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(sent_users)}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        else:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(sent_file), exist_ok=True)
        
        return sent_users

    def save_sent_user(self, username: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö"""
        sent_file = self.config.get("paths.sent_users_file")
        try:
            with open(sent_file, 'a', encoding='utf-8') as f:
                f.write(f"{username}\n")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


class Statistics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, config: Config, logger: Logger):
        self.config = config
        self.logger = logger
        self.sent_count = 0
        self.failed_count = 0
        self.active_accounts = 0
        self.total_accounts = 0
        self.start_time = None
        self.account_stats = {}  # username -> {"sent": 0, "failed": 0, "status": "active", "total_sent": 0, "total_failed": 0}
        self.lock = threading.Lock()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.load_account_stats()

    def load_account_stats(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        stats_file = self.config.get("paths.stats_file")
        if os.path.exists(stats_file):
            try:
                with open(stats_file, 'r', encoding='utf-8') as f:
                    saved_stats = json.load(f)
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    for account, stats in saved_stats.items():
                        self.account_stats[account] = {
                            "sent": 0,  # –°—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                            "failed": 0,  # –°—á–µ—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                            "status": "inactive",  # –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                            "total_sent": stats.get("total_sent", 0),  # –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
                            "total_failed": stats.get("total_failed", 0),  # –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
                            "last_activity": stats.get("last_activity", "")
                        }
                
                total_sent = sum(stats["total_sent"] for stats in self.account_stats.values())
                total_failed = sum(stats["total_failed"] for stats in self.account_stats.values())
                
                self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.account_stats)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, "
                               f"–≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}, –æ—à–∏–±–æ–∫: {total_failed}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
                self.account_stats = {}

    def save_account_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        stats_file = self.config.get("paths.stats_file")
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_data = {}
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            for account, stats in self.account_stats.items():
                save_data[account] = {
                    "total_sent": stats["total_sent"],
                    "total_failed": stats["total_failed"],
                    "last_activity": current_time if stats["status"] == "active" else stats.get("last_activity", "")
                }
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(stats_file), exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(stats_file, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")

    def start_tracking(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        self.start_time = datetime.now()

    def add_sent(self, account: str = None):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö"""
        with self.lock:
            self.sent_count += 1
            if account:
                if account not in self.account_stats:
                    self.account_stats[account] = {
                        "sent": 0, "failed": 0, "status": "active",
                        "total_sent": 0, "total_failed": 0, "last_activity": ""
                    }
                
                self.account_stats[account]["sent"] += 1
                self.account_stats[account]["total_sent"] += 1
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
                if self.account_stats[account]["total_sent"] % 10 == 0:
                    self.save_account_stats()

    def add_failed(self, account: str = None):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫"""
        with self.lock:
            self.failed_count += 1
            if account:
                if account not in self.account_stats:
                    self.account_stats[account] = {
                        "sent": 0, "failed": 0, "status": "active",
                        "total_sent": 0, "total_failed": 0, "last_activity": ""
                    }
                
                self.account_stats[account]["failed"] += 1
                self.account_stats[account]["total_failed"] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                self.save_account_stats()

    def set_account_status(self, account: str, status: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        with self.lock:
            if account not in self.account_stats:
                self.account_stats[account] = {
                    "sent": 0, "failed": 0, "status": status,
                    "total_sent": 0, "total_failed": 0, "last_activity": ""
                }
            else:
                self.account_stats[account]["status"] = status
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            if status in ["banned", "flood_wait", "inactive"]:
                self.save_account_stats()

    def update_active_accounts(self, active: int, total: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        with self.lock:
            self.active_accounts = active
            self.total_accounts = total

    def get_success_rate(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫"""
        total = self.sent_count + self.failed_count
        return (self.sent_count / total * 100) if total > 0 else 0.0

    def get_total_success_rate(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"""
        total_sent = sum(stats["total_sent"] for stats in self.account_stats.values())
        total_failed = sum(stats["total_failed"] for stats in self.account_stats.values())
        total = total_sent + total_failed
        return (total_sent / total * 100) if total > 0 else 0.0

    def get_total_sent(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"""
        return sum(stats["total_sent"] for stats in self.account_stats.values())

    def get_total_failed(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"""
        return sum(stats["total_failed"] for stats in self.account_stats.values())

    def get_runtime(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
        if not self.start_time:
            return "00:00:00"
        
        elapsed = datetime.now() - self.start_time
        hours = elapsed.seconds // 3600
        minutes = (elapsed.seconds % 3600) // 60
        seconds = elapsed.seconds % 60
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

    def cleanup_and_save(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with self.lock:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–µ
            for account in self.account_stats:
                self.account_stats[account]["sent"] = 0
                self.account_stats[account]["failed"] = 0
                self.account_stats[account]["status"] = "inactive"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.save_account_stats()
            
            self.logger.success("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


class TelegramSender:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, config: Config, logger: Logger, data_loader: DataLoader, statistics: Statistics):
        self.config = config
        self.logger = logger
        self.data_loader = data_loader
        self.stats = statistics
        self.active_clients = {}
        self.daily_counts = {}  # account -> {date: count}
        self.is_running = False

    async def create_client(self, session_file: str, api_id: int, api_hash: str, proxy: Dict = None) -> Optional[TelegramClient]:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telegram"""
        try:
            client_kwargs = {}
            if proxy:
                client_kwargs['proxy'] = proxy

            client = TelegramClient(session_file, api_id, api_hash, **client_kwargs)
            await client.connect()
            
            if await client.is_user_authorized():
                me = await client.get_me()
                username = me.username or f"id{me.id}"
                self.logger.success(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: @{username}")
                return client
            else:
                self.logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {os.path.basename(session_file)}")
                await client.disconnect()
                return None
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {os.path.basename(session_file)}: {e}")
            return None

    def can_send_today(self, account: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now().date()
        daily_limit = self.config.get("limits.daily_limit", 25)
        
        if account not in self.daily_counts:
            self.daily_counts[account] = {}
        
        if today not in self.daily_counts[account]:
            self.daily_counts[account][today] = 0
        
        return self.daily_counts[account][today] < daily_limit

    def increment_daily_count(self, account: str):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        today = datetime.now().date()
        if account not in self.daily_counts:
            self.daily_counts[account] = {}
        if today not in self.daily_counts[account]:
            self.daily_counts[account][today] = 0
        self.daily_counts[account][today] += 1

    def create_button_markup(self, button_text: str, button_url: str):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not button_text or not button_url:
                self.logger.warning(f"–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ URL –∫–Ω–æ–ø–∫–∏: text='{button_text}', url='{button_url}'")
                return None
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å https://, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if not button_url.startswith(('http://', 'https://')):
                button_url = f"https://{button_url}"
                self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å https:// –∫ URL –∫–Ω–æ–ø–∫–∏: {button_url}")
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å URL
            button = Button.url(button_text, button_url)
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: text='{button_text}', url='{button_url}'")
            return [[button]]
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏: text='{button_text}', url='{button_url}', error={e}")
            return None

    async def send_message_to_user(self, client: TelegramClient, username: str, message: str, account: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            if not self.can_send_today(account):
                self.logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è {account}")
                return False

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏–Ω—Ç–∞–∫—Å –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            processed_message, message_button = self.data_loader.process_spintax(message)
            processed_message = self.data_loader.add_random_emoji(processed_message)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            button_markup = None
            button_text = None
            button_url = None
            
            if message_button:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                button_text = message_button["text"]
                button_url = message_button["url"]
                self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: text='{button_text}', url='{button_url}'")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                config_button_text = self.config.get("settings.button.text")
                config_button_url = self.config.get("settings.button.url")
                
                if config_button_text and config_button_url:
                    button_text = config_button_text
                    button_url = config_button_url
                    self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: text='{button_text}', url='{button_url}'")
                else:
                    self.logger.warning(f"–ö–Ω–æ–ø–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞ (text='{config_button_text}', url='{config_button_url}')")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if button_text and button_url:
                button_markup = self.create_button_markup(button_text, button_url)
                if button_markup:
                    self.logger.button_info(button_text, button_url)
                else:
                    self.logger.warning(f"–ö–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏")
            else:
                self.logger.warning(f"–ö–Ω–æ–ø–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –±–µ–∑
            if button_markup:
                await client.send_message(username, processed_message, buttons=button_markup)
            else:
                await client.send_message(username, processed_message)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.increment_daily_count(account)
            self.stats.add_sent(account)
            self.data_loader.save_sent_user(username)
            
            button_info = f" (—Å –∫–Ω–æ–ø–∫–æ–π '{button_text}')" if button_text else " (–±–µ–∑ –∫–Ω–æ–ø–∫–∏)"
            self.logger.success(f"‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{username} —á–µ—Ä–µ–∑ {account}{button_info}")
            return True
            
        except errors.FloodWaitError as e:
            wait_time = e.seconds
            if wait_time > self.config.get("settings.flood_wait_threshold", 600):
                self.logger.error(f"FloodWait —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–π ({wait_time}s) –¥–ª—è {account}, –æ—Ç–∫–ª—é—á–∞–µ–º")
                self.stats.set_account_status(account, "flood_wait")
                return False
            else:
                self.logger.warning(f"FloodWait {wait_time}s –¥–ª—è {account}")
                await asyncio.sleep(wait_time + 1)
                return await self.send_message_to_user(client, username, message, account)
                
        except errors.UserPrivacyRestrictedError:
            self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –æ–≥—Ä–∞–Ω–∏—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è")
            self.stats.add_failed(account)
            return False
            
        except errors.UserDeactivatedError:
            self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            self.stats.add_failed(account)
            return False
            
        except errors.InputUserDeactivatedError:
            self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            self.stats.add_failed(account)
            return False
            
        except errors.UserBannedInChannelError:
            self.logger.error(f"–ê–∫–∫–∞—É–Ω—Ç {account} –∑–∞–±–∞–Ω–µ–Ω")
            self.stats.set_account_status(account, "banned")
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ @{username} —á–µ—Ä–µ–∑ {account}: {e}")
            self.stats.add_failed(account)
            return False

    async def worker(self, client: TelegramClient, account: str, users: List[str], messages: List[str]):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            for username in users:
                if not self.is_running:
                    break
                    
                if not self.can_send_today(account):
                    self.logger.info(f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {account}")
                    break
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = random.choice(messages)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                success = await self.send_message_to_user(client, username, message, account)
                
                if not success:
                    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã—Ö–æ–¥–∏–º
                    account_status = self.stats.account_stats.get(account, {}).get("status", "active")
                    if account_status in ["banned", "flood_wait"]:
                        break
                
                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                delay = random.uniform(
                    self.config.get("limits.min_delay", 5),
                    self.config.get("limits.max_delay", 15)
                )
                await asyncio.sleep(delay)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ {account}: {e}")
        finally:
            await client.disconnect()
            if account in self.active_clients:
                del self.active_clients[account]

    async def start_sending(self, users: List[str], messages: List[str], sessions: List[str], 
                          api_data: List[Tuple[int, str]], proxies: List[Dict]):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not users or not messages or not sessions:
            self.logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
            return

        self.is_running = True
        self.stats.start_tracking()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        sent_users = self.data_loader.load_sent_users()
        users = [u for u in users if u not in sent_users]
        
        if not users:
            self.logger.warning("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        max_accounts = min(len(sessions), self.config.get("limits.max_concurrent_accounts", 3000))
        accounts_per_api = self.config.get("limits.accounts_per_api", 30)
        accounts_per_proxy = self.config.get("limits.accounts_per_proxy", 1)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —á–∞—Å—Ç–∏
        users_per_account = len(users) // max_accounts + 1
        user_chunks = [users[i:i + users_per_account] for i in range(0, len(users), users_per_account)]
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = []
        for i in range(min(max_accounts, len(user_chunks))):
            if i >= len(sessions):
                break
                
            session_file = sessions[i]
            api_id, api_hash = api_data[i // accounts_per_api % len(api_data)]
            proxy = proxies[i // accounts_per_proxy % len(proxies)] if proxies else None
            user_chunk = user_chunks[i]
            
            if not user_chunk:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = await self.create_client(session_file, api_id, api_hash, proxy)
            if client:
                account = os.path.basename(session_file)
                self.active_clients[account] = client
                self.stats.set_account_status(account, "active")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                task = asyncio.create_task(
                    self.worker(client, account, user_chunk, messages)
                )
                tasks.append(task)
        
        self.stats.update_active_accounts(len(tasks), len(sessions))
        self.logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ {len(tasks)} –≤–æ—Ä–∫–µ—Ä–æ–≤")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        
        self.is_running = False
        self.logger.success("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def stop_sending(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        self.is_running = False
        self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")


class Interface:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, config: Config, logger: Logger, data_loader: DataLoader, 
                 sender: TelegramSender, statistics: Statistics):
        self.config = config
        self.logger = logger
        self.data_loader = data_loader
        self.sender = sender
        self.stats = statistics
        self.current_menu = "main"
        self.log_scroll = 0
        self.is_running = True
        
        # –î–∞–Ω–Ω—ã–µ
        self.users = []
        self.messages = []
        self.sessions = []
        self.api_data = []
        self.proxies = []

    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω"""
        os.system('cls' if os.name == 'nt' else 'clear')

    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print(f"{Fore.CYAN}{'='*80}")
        print(f"{Fore.CYAN}               TELEGRAM MASS SENDER PRO v1.0")
        print(f"{Fore.CYAN}         –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram")
        print(f"{Fore.CYAN}{'='*80}")
        print()

    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_sent = self.stats.get_total_sent()
        total_failed = self.stats.get_total_failed()
        total_success_rate = self.stats.get_total_success_rate()
        
        print(f"{Fore.YELLOW}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –°–¢–ê–¢–ò–°–¢–ò–ö–ê ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print(f"{Fore.YELLOW}‚ïë –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:                                   ‚ïë")
        print(f"{Fore.YELLOW}‚ïë   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {Fore.GREEN}{self.stats.sent_count:<8} {Fore.YELLOW}‚ïë –û—à–∏–±–æ–∫: {Fore.RED}{self.stats.failed_count:<12} {Fore.YELLOW}‚ïë")
        print(f"{Fore.YELLOW}‚ïë   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {Fore.CYAN}{self.stats.get_success_rate():.1f}%{Fore.YELLOW}     ‚ïë –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {Fore.CYAN}{self.stats.get_runtime():<8} {Fore.YELLOW}‚ïë")
        print(f"{Fore.YELLOW}‚ïë                                                   ‚ïë")
        print(f"{Fore.YELLOW}‚ïë –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:                                     ‚ïë")
        print(f"{Fore.YELLOW}‚ïë   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {Fore.GREEN}{total_sent:<8} {Fore.YELLOW}‚ïë –û—à–∏–±–æ–∫: {Fore.RED}{total_failed:<12} {Fore.YELLOW}‚ïë")
        print(f"{Fore.YELLOW}‚ïë   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {Fore.CYAN}{total_success_rate:.1f}%{Fore.YELLOW}                              ‚ïë")
        print(f"{Fore.YELLOW}‚ïë                                                   ‚ïë")
        print(f"{Fore.YELLOW}‚ïë –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {Fore.GREEN}{self.stats.active_accounts:<3} {Fore.YELLOW}‚ïë –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {Fore.CYAN}{self.stats.total_accounts:<7} {Fore.YELLOW}‚ïë")
        print(f"{Fore.YELLOW}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print()

    def print_logs(self, max_lines: int = 10):
        """–í—ã–≤–æ–¥–∏—Ç –ª–æ–≥–∏"""
        print(f"{Fore.MAGENTA}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –õ–û–ì–ò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        
        if not self.logger.logs:
            print(f"{Fore.MAGENTA}‚ïë{' ' * 52}‚ïë")
            print(f"{Fore.MAGENTA}‚ïë{' –ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è':^52}‚ïë")
            print(f"{Fore.MAGENTA}‚ïë{' ' * 52}‚ïë")
        else:
            visible_logs = self.logger.logs[self.log_scroll:self.log_scroll + max_lines]
            for log_entry in visible_logs:
                timestamp = log_entry["timestamp"]
                level = log_entry["level"]
                message = log_entry["message"]
                color = log_entry["color"]
                
                # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(message) > 40:
                    message = message[:37] + "..."
                
                log_line = f"[{timestamp}] {message}"
                if len(log_line) > 50:
                    log_line = log_line[:47] + "..."
                
                print(f"{Fore.MAGENTA}‚ïë {color}{log_line:<50}{Fore.MAGENTA} ‚ïë")
        
        print(f"{Fore.MAGENTA}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print()

    def print_main_menu(self):
        """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print(f"{Fore.WHITE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print(f"{Fore.WHITE}‚ïë  1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ                               ‚ïë")
        print(f"{Fore.WHITE}‚ïë  2. –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É                                ‚ïë")
        print(f"{Fore.WHITE}‚ïë  3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏                                      ‚ïë")
        print(f"{Fore.WHITE}‚ïë  4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤                           ‚ïë")
        print(f"{Fore.WHITE}‚ïë  5. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É                            ‚ïë")
        print(f"{Fore.WHITE}‚ïë  6. –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É                            ‚ïë")
        print(f"{Fore.WHITE}‚ïë  7. –í—ã—Ö–æ–¥                                          ‚ïë")
        print(f"{Fore.WHITE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö
        print(f"{Fore.CYAN}–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print(f"‚îú‚îÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {Fore.GREEN if self.users else Fore.RED}{len(self.users)}")
        print(f"‚îú‚îÄ –°–æ–æ–±—â–µ–Ω–∏—è: {Fore.GREEN if self.messages else Fore.RED}{len(self.messages)}")
        print(f"‚îú‚îÄ –°–µ—Å—Å–∏–∏: {Fore.GREEN if self.sessions else Fore.RED}{len(self.sessions)}")
        print(f"‚îú‚îÄ API –∫–ª—é—á–∏: {Fore.GREEN if self.api_data else Fore.RED}{len(self.api_data)}")
        print(f"‚îî‚îÄ –ü—Ä–æ–∫—Å–∏: {Fore.GREEN if self.proxies else Fore.YELLOW}{len(self.proxies)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏
        button_text = self.config.get("settings.button.text")
        button_url = self.config.get("settings.button.url")
        if button_text and button_url:
            print(f"{Fore.CYAN}‚îî‚îÄ –ö–Ω–æ–ø–∫–∞: {Fore.GREEN}'{button_text}' -> {button_url}")
        else:
            print(f"{Fore.CYAN}‚îî‚îÄ –ö–Ω–æ–ø–∫–∞: {Fore.YELLOW}–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        print()

    def print_settings_menu(self):
        """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print(f"{Fore.WHITE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –ù–ê–°–¢–†–û–ô–ö–ò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print(f"{Fore.WHITE}‚ïë  1. –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {self.config.get('limits.daily_limit'):<17} ‚ïë")
        print(f"{Fore.WHITE}‚ïë  2. –ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫): {self.config.get('limits.min_delay'):<21} ‚ïë")
        print(f"{Fore.WHITE}‚ïë  3. –ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫): {self.config.get('limits.max_delay'):<20} ‚ïë")
        print(f"{Fore.WHITE}‚ïë  4. –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ API: {self.config.get('limits.accounts_per_api'):<24} ‚ïë")
        print(f"{Fore.WHITE}‚ïë  5. –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–∫—Å–∏: {self.config.get('limits.accounts_per_proxy'):<21} ‚ïë")
        print(f"{Fore.WHITE}‚ïë  6. –ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {self.config.get('limits.max_concurrent_accounts'):<11} ‚ïë")
        print(f"{Fore.WHITE}‚ïë  7. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —ç–º–æ–¥–∑–∏: {self.config.get('settings.emoji_probability'):<20} ‚ïë")
        print(f"{Fore.WHITE}‚ïë  8. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏                               ‚ïë")
        print(f"{Fore.WHITE}‚ïë  9. –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º                                  ‚ïë")
        print(f"{Fore.WHITE}‚ïë 10. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é                           ‚ïë")
        print(f"{Fore.WHITE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print()

    def print_button_settings(self):
        """–í—ã–≤–æ–¥–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏"""
        button_text = self.config.get("settings.button.text", "")
        button_url = self.config.get("settings.button.url", "")
        
        print(f"{Fore.WHITE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–ö–ò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print(f"{Fore.WHITE}‚ïë –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:                                ‚ïë")
        print(f"{Fore.WHITE}‚ïë   –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {button_text:<32} ‚ïë")
        print(f"{Fore.WHITE}‚ïë   URL: {button_url:<41} ‚ïë")
        print(f"{Fore.WHITE}‚ïë                                                   ‚ïë")
        print(f"{Fore.WHITE}‚ïë  1. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏                         ‚ïë")
        print(f"{Fore.WHITE}‚ïë  2. –ò–∑–º–µ–Ω–∏—Ç—å URL –∫–Ω–æ–ø–∫–∏                           ‚ïë")
        print(f"{Fore.WHITE}‚ïë  3. –û—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É                              ‚ïë")
        print(f"{Fore.WHITE}‚ïë  4. –ù–∞–∑–∞–¥                                         ‚ïë")
        print(f"{Fore.WHITE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print()
        print(f"{Fore.CYAN}–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!")
        print(f"{Fore.CYAN}–§–æ—Ä–º–∞—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {{button:–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏|https://example.com}}")
        print()

    def print_account_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
        print(f"{Fore.WHITE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–ö–ê–£–ù–¢–û–í ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        
        if not self.stats.account_stats:
            print(f"{Fore.WHITE}‚ïë{' ' * 52}‚ïë")
            print(f"{Fore.WHITE}‚ïë{' –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö':^52}‚ïë")
            print(f"{Fore.WHITE}‚ïë{' ' * 52}‚ïë")
        else:
            print(f"{Fore.WHITE}‚ïë {'–ê–∫–∫–∞—É–Ω—Ç':<15} {'–°–µ—Å—Å–∏—è':<8} {'–í—Å–µ–≥–æ':<8} {'–°—Ç–∞—Ç—É—Å':<10} ‚ïë")
            print(f"{Fore.WHITE}‚ïë {'':<15} {'S/F':<8} {'S/F':<8} {'':<10} ‚ïë")
            print(f"{Fore.WHITE}‚ïë{'-' * 52}‚ïë")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            sorted_accounts = sorted(
                self.stats.account_stats.items(),
                key=lambda x: x[1]["total_sent"],
                reverse=True
            )
            
            for account, stats in sorted_accounts[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20
                status_color = Fore.GREEN if stats["status"] == "active" else Fore.RED
                session_stats = f"{stats['sent']}/{stats['failed']}"
                total_stats = f"{stats['total_sent']}/{stats['total_failed']}"
                
                print(f"{Fore.WHITE}‚ïë {account:<15} {session_stats:<8} {total_stats:<8} "
                      f"{status_color}{stats['status']:<10}{Fore.WHITE} ‚ïë")
        
        print(f"{Fore.WHITE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print(f"{Fore.CYAN}S - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, F - –æ—à–∏–±–æ–∫. –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ø-20 –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        print(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")

    def clear_statistics(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        print(f"{Fore.YELLOW}–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        print(f"{Fore.RED}–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
        print(f"{Fore.CYAN}–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  - –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.stats.account_stats)}")
        print(f"  - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: {self.stats.get_total_sent()}")
        print(f"  - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {self.stats.get_total_failed()}")
        print()
        
        response = self.get_user_input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? (yes/no): ")
        if response.lower() == 'yes':
            try:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø–∞–º—è—Ç–∏
                self.stats.account_stats = {}
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_file = self.config.get("paths.stats_file")
                if os.path.exists(stats_file):
                    os.remove(stats_file)
                
                print(f"{Fore.GREEN}‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
                self.logger.success("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                
            except Exception as e:
                print(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        else:
            print(f"{Fore.YELLOW}–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
        input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def get_user_input(self, prompt: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"{Fore.CYAN}{prompt}", end="")
        return input().strip()

    def load_all_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"""
        print(f"{Fore.YELLOW}–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        files_to_check = [
            ("users_file", "–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
            ("messages_file", "–§–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π"), 
            ("apidata_file", "–§–∞–π–ª API –¥–∞–Ω–Ω—ã—Ö")
        ]
        
        missing_files = []
        for file_key, file_desc in files_to_check:
            file_path = self.config.get(f"paths.{file_key}")
            if not os.path.exists(file_path):
                missing_files.append((file_key, file_desc, file_path))
        
        if missing_files:
            print(f"{Fore.RED}–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
            for file_key, file_desc, file_path in missing_files:
                print(f"  - {file_desc}: {file_path}")
            
            response = self.get_user_input("–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç–∏ –≤—Ä—É—á–Ω—É—é? (y/n): ")
            if response.lower() == 'y':
                for file_key, file_desc, file_path in missing_files:
                    new_path = self.get_user_input(f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ {file_desc}: ")
                    if os.path.exists(new_path):
                        self.config.set(f"paths.{file_key}", new_path)
                        print(f"{Fore.GREEN}‚úì –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {new_path}")
                    else:
                        print(f"{Fore.RED}‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {new_path}")
            else:
                print(f"{Fore.YELLOW}–°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É.")
                return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.users = self.data_loader.load_users()
        self.messages = self.data_loader.load_messages()
        self.api_data = self.data_loader.load_api_data()
        self.sessions = self.data_loader.load_sessions()
        self.proxies = self.data_loader.load_proxies()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏
        if not self.proxies:
            response = self.get_user_input(f"{Fore.YELLOW}–ü—Ä–æ–∫—Å–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏? (y/n): ")
            if response.lower() != 'y':
                print(f"{Fore.RED}–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
                return
        
        print(f"{Fore.GREEN}‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    async def start_sending_process(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not all([self.users, self.messages, self.sessions, self.api_data]):
            print(f"{Fore.RED}‚úó –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö.")
            input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return
        
        print(f"{Fore.YELLOW}–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ...")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.users)}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(self.messages)}")
        print(f"–°–µ—Å—Å–∏–π: {len(self.sessions)}")
        print(f"API –∫–ª—é—á–µ–π: {len(self.api_data)}")
        print(f"–ü—Ä–æ–∫—Å–∏: {len(self.proxies)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
        button_text = self.config.get("settings.button.text")
        button_url = self.config.get("settings.button.url")
        if button_text and button_url:
            print(f"–ö–Ω–æ–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '{button_text}' -> {button_url}")
        else:
            print(f"–ö–Ω–æ–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        print()
        
        response = self.get_user_input("–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? (y/n): ")
        if response.lower() == 'y':
            print(f"{Fore.GREEN}üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏...")
            print(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            try:
                await self.sender.start_sending(
                    self.users, self.messages, self.sessions, 
                    self.api_data, self.proxies
                )
            except KeyboardInterrupt:
                print(f"{Fore.YELLOW}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...")
                self.sender.stop_sending()
            except Exception as e:
                print(f"{Fore.RED}–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            finally:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats.cleanup_and_save()
            
            input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def change_setting(self, setting_num: int):
        """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        settings_map = {
            1: ("limits.daily_limit", "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç", int),
            2: ("limits.min_delay", "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)", float),
            3: ("limits.max_delay", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫)", float),
            4: ("limits.accounts_per_api", "–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ API", int),
            5: ("limits.accounts_per_proxy", "–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–∫—Å–∏", int),
            6: ("limits.max_concurrent_accounts", "–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", int),
            7: ("settings.emoji_probability", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —ç–º–æ–¥–∑–∏ (0.0-1.0)", float)
        }
        
        if setting_num not in settings_map:
            return
        
        key, description, value_type = settings_map[setting_num]
        current_value = self.config.get(key)
        
        print(f"{Fore.CYAN}–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{description}': {current_value}")
        new_value = self.get_user_input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ")
        
        try:
            new_value = value_type(new_value)
            self.config.set(key, new_value)
            print(f"{Fore.GREEN}‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {description} = {new_value}")
        except ValueError:
            print(f"{Fore.RED}‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è!")
        
        input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def change_button_settings(self):
        """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏"""
        while True:
            self.clear_screen()
            self.print_header()
            self.print_button_settings()
            
            choice = self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç (1-4): ")
            
            if choice == "1":
                new_text = self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: ")
                if new_text:
                    self.config.set("settings.button.text", new_text)
                    print(f"{Fore.GREEN}‚úì –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_text}")
                else:
                    print(f"{Fore.YELLOW}–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
            elif choice == "2":
                new_url = self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –∫–Ω–æ–ø–∫–∏: ")
                if new_url:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://
                    if not new_url.startswith(('http://', 'https://')):
                        new_url = 'https://' + new_url
                    self.config.set("settings.button.url", new_url)
                    print(f"{Fore.GREEN}‚úì URL –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_url}")
                else:
                    print(f"{Fore.YELLOW}URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
            elif choice == "3":
                self.config.set("settings.button.text", "")
                self.config.set("settings.button.url", "")
                print(f"{Fore.YELLOW}‚úì –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
            elif choice == "4":
                break

    def change_file_paths(self):
        """–ò–∑–º–µ–Ω—è–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º"""
        files_map = {
            "users_file": "–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "messages_file": "–§–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–π",
            "apidata_file": "–§–∞–π–ª API –¥–∞–Ω–Ω—ã—Ö", 
            "proxies_file": "–§–∞–π–ª –ø—Ä–æ–∫—Å–∏",
            "sessions_dir": "–ü–∞–ø–∫–∞ —Å–µ—Å—Å–∏–π"
        }
        
        print(f"{Fore.CYAN}–¢–µ–∫—É—â–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º:")
        for key, description in files_map.items():
            current_path = self.config.get(f"paths.{key}")
            print(f"  {description}: {current_path}")
        print()
        
        for key, description in files_map.items():
            current_path = self.config.get(f"paths.{key}")
            new_path = self.get_user_input(f"–ù–æ–≤—ã–π –ø—É—Ç—å –∫ '{description}' (Enter - –æ—Å—Ç–∞–≤–∏—Ç—å {current_path}): ")
            
            if new_path:
                self.config.set(f"paths.{key}", new_path)
                print(f"{Fore.GREEN}‚úì –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å: {description}")
        
        input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    async def run_interface(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        while self.is_running:
            self.clear_screen()
            self.print_header()
            self.print_statistics()
            self.print_logs()
            
            if self.current_menu == "main":
                self.print_main_menu()
                
                choice = self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é (1-7): ")
                
                if choice == "1":
                    self.load_all_data()
                elif choice == "2":
                    await self.start_sending_process()
                elif choice == "3":
                    self.current_menu = "settings"
                elif choice == "4":
                    self.clear_screen()
                    self.print_account_stats()
                    input()
                elif choice == "5":
                    self.sender.stop_sending()
                    print(f"{Fore.YELLOW}–°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                    input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                elif choice == "6":
                    self.clear_statistics()
                elif choice == "7":
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
                    self.stats.cleanup_and_save()
                    self.is_running = False
                    print(f"{Fore.CYAN}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                
            elif self.current_menu == "settings":
                self.print_settings_menu()
                
                choice = self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É (1-10): ")
                
                if choice in ["1", "2", "3", "4", "5", "6", "7"]:
                    self.change_setting(int(choice))
                elif choice == "8":
                    self.change_button_settings()
                elif choice == "9":
                    self.change_file_paths()
                elif choice == "10":
                    self.current_menu = "main"


def create_default_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    base_dir = Path(".")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    (base_dir / "sessions").mkdir(exist_ok=True)
    (base_dir / "sent_users").mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    examples = {
        "users.txt": """@user1
user2
user3
user4""",
        
        "messages.txt": """1.–ü—Ä–∏–≤–µ—Ç, {–¥—Ä—É–≥|—Ç–æ–≤–∞—Ä–∏—â}! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ {–Ω–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ|–∫—Ä—É—Ç–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏}?
2.–°–º–æ—Ç—Ä–∏, {—ç—Ç–æ|–≤–æ—Ç} {–∫—Ä—É—Ç–æ|–ø–æ—Ç—Ä—è—Å–∞—é—â–µ}! {button:–ü–æ–¥—Ä–æ–±–Ω–µ–µ|https://mysite.com/details}
3.–ü—Ä–∏–≤–µ—Ç, —Ç—ã –æ—Å—Ç–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É –Ω–∞ —Å–≤—è–∑—å, —Ü–µ–Ω–∞: 250 –≥—Ä–Ω, —Å–∫–∏–Ω—É—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-–º–∞–≥–∞–∑–∏–Ω? {button:–ú–∞–≥–∞–∑–∏–Ω|https://t.me/myshop}""",
        
        "apidata.txt": """123456:abcdef1234567890abcdef1234567890
789012:ghijk4567890abcdef1234567890abcd""",
        
        "proxies.txt": """192.168.1.1:1080:user:pass
10.0.0.1:1080:user2:pass2"""
    }
    
    created_files = []
    for filename, content in examples.items():
        file_path = base_dir / filename
        if not file_path.exists():
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                created_files.append(filename)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
    
    if created_files:
        print(f"{Fore.GREEN}–°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏: {', '.join(created_files)}")
        print(f"{Fore.YELLOW}–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!")
        print(f"{Fore.CYAN}–ü—Ä–∏–º–µ—Ä—ã –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ messages.txt!")
        print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print(f"{Fore.CYAN}–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mass Sender Pro...")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    create_default_files()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    config = Config()
    logger = Logger(config.get("paths.logs_file", "telegram_sender.log"))
    data_loader = DataLoader(config, logger)
    statistics = Statistics(config, logger)
    sender = TelegramSender(config, logger, data_loader, statistics)
    interface = Interface(config, logger, data_loader, sender, statistics)
    
    logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await interface.run_interface()
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n{Fore.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        if sender.active_clients:
            print(f"{Fore.YELLOW}–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
            for client in sender.active_clients.values():
                try:
                    await client.disconnect()
                except:
                    pass
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        statistics.cleanup_and_save()
        
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print(f"{Fore.GREEN}–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {config.get('paths.logs_file')}")


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
        if sys.version_info < (3, 7):
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
            sys.exit(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)